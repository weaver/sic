#+BEGIN_SRC sh
make install compile
#+END_SRC

** Mon Jun 11 2018
*** 3.1 Integers

Integers can be compiled to Gnu Assembler and linked to with a
rudimentary =driver.c=. The driver calls ~int scheme_entry()~ and
prints its result to stdout. The =scheme_entry= procedure is
implemented via ~COMPILE-PROGRAM~ in =compile.scm=, which emits GNU
Assembler to stdout. The ~COMPILE-TEST!~ and ~RUN-TEST!~ procedures
write the emitted assembler to =test.s=, build an executable called
=test=, and run it.

#+BEGIN_SRC asm
_scheme_entry:
	.cfi_startproc
	movl	$42, %eax
	retq
	.cfi_endproc
#+END_SRC

Assesmbler is derived from writing equivalent C code in =test.c= and
compiling it to assembler with ~make assemble-test~.

Integers are compiled by printing the number to stdout using Chibi
Scheme's built-in support for writing numbers to an output port. The
driver interprets integers by using ~%d~ in a C =stdio= string
template.

Test results:
#+BEGIN_SRC sh
% make                                                                                                                                                                                                                                                               [21:47:16]
chibi-scheme compile.scm
Testing 3.1 Integers
✔ OK 42
✔ OK -1
#+END_SRC

**** Implementation Notes

On OS X, running ~gcc --omit-frame-pointer~ produces the error =clang:
error: unsupported option '--omit-frame-pointer'=. Instead, use
[[https://stackoverflow.com/a/47851488][-fomit-frame-pointer -momit-leaf-frame-pointer]].

#+BEGIN_SRC c
int scheme_entry() {
  return 42;
}
#+END_SRC

#+BEGIN_SRC asm
	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 13
	.globl	_scheme_entry           ## -- Begin function scheme_entry
	.p2align	4, 0x90
_scheme_entry:                          ## @scheme_entry
	.cfi_startproc
## BB#0:
	movl	$42, %eax
	retq
	.cfi_endproc
                                        ## -- End function
#+END_SRC

Documentation for GNU Assembler (GAS) CFI directives are [[https://sourceware.org/binutils/docs-2.24/as/CFI-directives.html#CFI-directives][here]]. Above:

+ cfi_startproc :: begins a function that should have an entry in =eh_frame=
+ cfi_endproc :: ends a function

An =eh_frame= contains language-specific information for exception
handling. The [[http://web.archive.org/web/20130111101034/http://blog.mozilla.org/respindola/2011/05/12/cfi-directives][CFI directives]] allows the assembler to generate a table
based on code sizes.

Other notes:

+ The ~retq~ instruction is [[https://stackoverflow.com/a/42654290][explicit about operand size]].

Used [[http://synthcode.com/scheme/chibi/lib/chibi/process.html][(chibi process)]] to execute subprocesses. Commands can be
represented as strings (and are split on whitespace before execution)
or lists. List elements are [[https://github.com/ashinn/chibi-scheme/blob/master/lib/chibi/process.scm#L59][formatted to strings]] before =execvp= is
called: symbols and numbers are treated specially.

**** Questions

+ What does generated code look like without ~--omit-frame-pointer~?
**** Future Improvements

+ Compilation depends on special designations "test.s" and "test"
+ No input validation is done and scheme's integers can be arbitrarily
  large. This can cause the driver to overflow (wrapping to negative
  values) or compilation failure ("literal value out of range for
  directive" when compiling =test.s=).
+ Add rollup summary stats to test runs.
+ Exit with particular status code based on test run success.
*** 3.2 Intermediate Constants

Add support for characters, boolean, and empty list. Ensure that
fixnums don't regress.

#+BEGIN_SRC sh
% make                                                                                                                                                                                                                                                               [23:14:14]
chibi-scheme compile.scm
Testing 3.1 Integers
✔ OK 42
✔ OK -1
Testing 3.2 Intermediate Constants
✔ OK #\c
✔ OK #\"
✔ OK #t
✔ OK #f
✔ OK '()
#+END_SRC

**** Implementation Notes

Added procedure ~IMMEDIATE-REPR~ that encodes scheme values to machine
integer values. Added corresponding support to =driver.c= for decoding
integer values and printing appropriate scheme representation.

+ Fixnums have mask 0x03 (shift 2 bits) and are tagged with 0x00.
+ Characters have mask 0xFF (shift 8 bits) and tag 0x0F
+ Boolean have a similar mask and shift with tag 0x3F
+ Empty list has static value / tag 0x3F

Used [[https://srfi.schemers.org/srfi-33/srfi-33.txt][(srfi 33)]] for bitwise operations.

These changes resolve some of the future improvements noted in 3.1
because inputs are validated by type: an exception is raised when an
unsupported value is passed to ~IMMEDIATE-REPR~. However, integers can
still overflow.

**** Future Improvements

+ constants for shifts and tags are duplicated between =driver.c and =compile.scm=
+ constants for masks should be derivatives of shifts
+ DRY up operations in driver for masking and comparing with tags
+ DRY up 8-bit shift operations
+ run specific test
** Tue Jun 12 2018
*** 3.3 Unary Primitives

Added support for =add1=, =sub1=, =integer->char=, =char->integer=,
=null?=, =zero?=, =integer?=, =char?=, =boolean?=, and =not=. Each of
these operations accept a single argument. It's emitted as an
expression (stored in =%eax=).

+ =add1= and =sub1= are then implemented using =addl= and =subl=
+ =integer->char= and =char->integer= are then implemented with
  arithmetic shift and logical OR (to tag).

Predicates and =not= are implemented using a combination of =cmp= +
=set= followed by an arithmetic shift and logical OR to convert the
value to boolean. For example, =zero?= is ~(predicate compare-to 0)~ and
=integer?= is ~(predicate test-mask FIXNUM-MASK)~.

#+BEGIN_SRC scheme
  (define (compare-to literal)
    (emit "cmpl $" literal ", %eax")
    (emit "movl $0, %eax")
    (emit "sete %al"))

  (define (test-mask mask tag)
    (emit "andb $" mask ", %al")
    (emit "cmpb $" tag ", %al")
    (emit "movl $0, %eax")
    (emit "sete %al"))

  (define (shift-left-and-tag shift tag)
    (emit "shll $" shift ", %eax")
    (emit "orl $" tag ", %eax"))
#+END_SRC

**** Implementation Notes

Learned a little more about [[https://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax][GAS Syntax]]. Operation suffixes indicate
operand size. For example, "l" means "long".

This [[https://en.wikibooks.org/wiki/X86_Assembly][wikibook about X86_Assembly]] is a helpful reference for basic
instructions.

Used ~make assemble-test~ with =scheme_entry= definitions like the
example below. Learned that the Load Effective Address operation
(=lea=) can be used to implement basic artithmetic operations in a few
cases.

#+BEGIN_SRC c
int scheme_entry(int val) {
  return (val << 6) | 0x2F;
}
#+END_SRC

The example above assembles to:

#+BEGIN_SRC asm
	shll	$6, %edi
	leal	47(%rdi), %eax
#+END_SRC

From [[https://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax#Address_operand_syntax][Address Operand Syntax]]: there are up to 4 parameters of an
address operand that are presented in the syntax
~segment:displacement(base register, index register, scale
factor)~. The base, index and displacement components can be used in
any combination, and every component can be omitted; omitted
components are excluded from the calculation above.

Trying different permutations of C code showed that =lea= wasn't
always used: sometimes =orl= is used instead. To DRY this up, always
use =orl=. For example:

#+BEGIN_SRC c
int scheme_entry(int val) {
  return ((val == 63) << 8) | 63;
}
#+END_SRC

assembles to:

#+BEGIN_SRC asm
	xorl	%eax, %eax
	cmpl	$63, %edi
	sete	%al
	shll	$8, %eax
	orl	$63, %eax
#+END_SRC

The generated code zeros a register with =xor=. This generates a
smaller opcode than =mov= ([[https://stackoverflow.com/questions/1396527/what-is-the-purpose-of-xoring-a-register-with-itself][see stack overflow]]). Howver, these
operations caused a number of problems with a general
implementation. First, =xor= sets processor flags, which makes =cmp= +
=set= fail to produce the expected outcome in some cases. Next, the
use of the =di= register also makes some operations fail.

Using =mov= instead of =xor= and =ax= instead of =di= yields
predicates that are all implemented in terms of the procedures
below. For example, =zero?= is ~(predicate compare-to 0)~ and
=integer?= is ~(predicate test-mask FIXNUM-MASK)~.

#+BEGIN_SRC scheme
  (define (compare-to literal)
    (emit "cmpl $" literal ", %eax")
    (emit "movl $0, %eax")
    (emit "sete %al"))

  (define (test-mask mask tag)
    (emit "andb $" mask ", %al")
    (emit "cmpb $" tag ", %al")
    (emit "movl $0, %eax")
    (emit "sete %al"))

  (define (shift-left-and-tag shift tag)
    (emit "shll $" shift ", %eax")
    (emit "orl $" tag ", %eax"))
#+END_SRC
**** Future Imrovements

+ no bounds checking on inputs
+ some inefficiency from DRY code (for example, =cmp= for
  =FIXNUM-TAG=)
+ recognize constant expressions and pre-calculate results
** Thu Jun 14 2018
*** 3.4 Binary Primitives

Supported primitives: add, subtract, multiply, quotient, remainder,
integer comparison, character comparison, integer equality, character
equality, boolean equality

**** Implementation Notes

When first adding support for binary primitives, a =segmentation
fault= occurred when running any of the test cases. For example, the
test case ~(test-case '(+ 2 3) "5")~ generated this assembly:

#+BEGIN_SRC asm
movl $12, %eax
movl %eax, -4(%esp)
movl $8, %eax
addl -4(%esp), %eax
#+END_SRC

After some trial and error, the problem turned out to be architecture
incompatibility. The program was being compiled for a 64-bit
architecture, but the 32-bit stack pointer register was being used. To
fix this, switch to use =rsp= instead of =esp= or else pass =-m32= to
=gcc=.

Some of the trial and error was attempting a built in dockerized linux
with gcc instead of in OS X with gcc-clang. Two notes:

+ the "wrapper" assembley is different: can the same header/footer be
  used in both places?
+ running the test suite in Linux is faster than OS X: why? It seems
  to be something about running a slow first-run for newly compiled
  programs. Maybe antivirus and not OS X?

Helpful list of Intel [[https://web.itu.edu.tr/kesgin/mul06/intel/index.html][x86 Instructions]].

**** Future Improvements

+ reconcile assembley header/footer of Linux/gcc with OSX/gcc-clang
+ figure out why first-run of test-cases is slow on OS X
+ return a remainder
